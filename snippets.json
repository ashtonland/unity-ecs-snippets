{
	"Dots Create ISystem": {
		"prefix": "dcs",
		"body": [
			"using Unity.Burst;",
			"using Unity.Entities;",
			"using Unity.Mathematics;",
			"using Unity.Transforms;",
			"",
			"namespace ${1}",
			"{",
			"\t[BurstCompile]",
			"\tpublic partial struct ${2:$TM_FILENAME_BASE} : ISystem",
			"\t{",
			"\t\tpublic void OnCreate(ref SystemState state)",
			"\t\t{",
			"\t\t\t${0}",
			"\t\t}",
			"",
			"\t\t[BurstCompile]",
			"\t\tpublic void OnUpdate(ref SystemState state)",
			"\t\t{",
			"\t\t\t",
			"\t\t}",
			"",
			"\t\tpublic void OnDestroy(ref SystemState state)",
			"\t\t{",
			"\t\t\t",
			"\t\t}",
			"\t}",
			"}"
		],
		"description": "Create a Unity DOTS System with the ISystem interface"
	},
	"Dots Create ISystem w/ onStart onStop": {
		"prefix": "dcsss",
		"body": [
			"using Unity.Burst;",
			"using Unity.Entities;",
			"using Unity.Mathematics;",
			"using Unity.Transforms;",
			"",
			"namespace ${1}",
			"{",
			"\t[BurstCompile]",
			"\tpublic partial struct ${2:$TM_FILENAME_BASE} : ISystem, ISystemStartStop",
			"\t{",
			"\t\tpublic void OnCreate(ref SystemState state)",
			"\t\t{",
			"\t\t\t${0}",
			"\t\t}",
			"",
			"\t\t[BurstCompile]",
			"\t\tpublic void OnUpdate(ref SystemState state)",
			"\t\t{",
			"\t\t\t",
			"\t\t}",
			"",
			"\t\tpublic void OnDestroy(ref SystemState state)",
			"\t\t{",
			"\t\t\t",
			"\t\t}",
			"",
			"\t\tpublic void OnStartRunning(ref SystemState state)",
			"\t\t{",
			"\t\t\t",
			"\t\t}",
			"",
			"\t\tpublic void OnStopRunning(ref SystemState state)",
			"\t\t{",
			"\t\t\t",
			"\t\t}",
			"\t}",
			"}"
		],
		"description": "Create a Unity DOTS ISystem with onStartRunning & onStopRunning callbacks"
	},
	"Dots Create SystemBase": {
		"prefix": "dcsb",
		"body": [
			"using Unity.Entities;",
			"using Unity.Mathematics;",
			"using Unity.Transforms;",
			"",
			"namespace ${1}",
			"{",
			"\tpublic partial class ${2:$TM_FILENAME_BASE} : SystemBase",
			"\t{",
			"\t\tprotected override void OnCreate()",
			"\t\t{",
			"\t\t\t${0}",
			"\t\t}",
			"",
			"\t\tprotected override void OnUpdate()",
			"\t\t{",
			"\t\t\t",
			"\t\t}",
			"",
			"\t\tprotected override void OnDestroy()",
			"\t\t{",
			"\t\t\t",
			"\t\t}",
			"\t\tprotected override void OnStartRunning()",
			"\t\t{",
			"\t\t\t",
			"\t\t}",
			"",
			"\t\tprotected override void OnStopRunning()",
			"\t\t{",
			"\t\t\t",
			"\t\t}",
			"\t}",
			"}"
		],
		"description": "Create a managed Unity DOTS System with the SystemBase class"
	},
	"Dots Create Unmanaged Component": {
		"prefix": "dcc",
		"body": [
			"using Unity.Entities;",
			"",
			"namespace ${1}",
			"{",
			"\tpublic struct ${2:$TM_FILENAME_BASE} : IComponentData",
			"\t{",
			"\t\tpublic ${3:int} ${4:value};${0}",
			"\t}",
			"}"
		],
		"description": "Create a Unity DOTS unmanaged component (recommended if using blittable types)"
	},
	"Dots Create Managed Component": {
		"prefix": "dcmc",
		"body": [
			"using Unity.Entities;",
			"",
			"namespace ${1}",
			"{",
			"\tpublic class ${2:$TM_FILENAME_BASE} : IComponentData",
			"\t{",
			"\t\tpublic ${3:string} ${4:value};${0}",
			"\t}",
			"}"
		],
		"description": "Create a Unity DOTS managed component (only if using NON-blittable types)"
	},
	"Dots Create Managed Component w/ External Resource": {
		"prefix": "dcmcer",
		"body": [
			"using System;",
			"using UnityEngine;",
			"using Unity.Entities;",
			"",
			"namespace ${1}",
			"{",
			"\tpublic class ${2:$TM_FILENAME_BASE} : IComponentData, IDisposable, ICloneable",
			"\t{",
			"\t\tpublic ${3:ParticleSystem} ${4:ParticleSystem};${0}",
			"",
			"\t\tpublic void Dispose()",
			"\t\t{",
			"\t\t\t//garbage collection when this component is destroyed",
			"\t\t\tUnityEngine.Object.Destroy(${4:ParticleSystem});",
			"\t\t}",
			"",
			"\t\tpublic object Clone()",
			"\t\t{",
			"\t\t\t//duplicate a new particle system when this entity is duplicated",
			"\t\t\t//so that all copy entity instances do not use the same external resource",
			"\t\t\treturn new ${2:$TM_FILENAME_BASE} {",
			"\t\t\t\t${4:ParticleSystem} = UnityEngine.Object.Instantiate(${4:ParticleSystem})",
			"\t\t\t};",
			"\t\t}",
			"\t}",
			"}"
		],
		"description": "Create a Unity DOTS managed component referencing an external resource"
	},
	"Dots Create Unmanaged Shared Component": {
		"prefix": "dcsc",
		"body": [
			"using Unity.Entities;",
			"",
			"namespace ${1}",
			"{",
			"\tpublic struct ${2:$TM_FILENAME_BASE} : ISharedComponentData",
			"\t{",
			"\t\tpublic ${3:int} ${4:value};${0}",
			"\t}",
			"}"
		],
		"description": "Create a Unity DOTS unmanaged shared component (for components used on many entities & with the same values)"
	},
	"Dots Create Managed Shared Component": {
		"prefix": "dcmsc",
		"body": [
			"using System;",
			"using Unity.Entities;",
			"",
			"namespace ${1}",
			"{",
			"\tpublic struct ${2:$TM_FILENAME_BASE} : ISharedComponentData, IEquatable<${2:$TM_FILENAME_BASE}>",
			"\t{",
			"\t\tpublic ${3:string} ${4:value};${0}",
			"",
			"\t\tpublic bool Equals(${2:$TM_FILENAME_BASE} other)",
			"\t\t{",
			"\t\t\treturn ${4:value}.Equals(other.${4:value});",
			"\t\t}",
			"",
			"\t\tpublic override int GetHashCode()",
			"\t\t{",
			"\t\t\treturn ${4:value}.GetHashCode();",
			"\t\t}",
			"\t}",
			"}"
		],
		"description": "Create a Unity DOTS managed shared component (for shared components using non-blittable types)"
	},
	"Dots Create Tag Component": {
		"prefix": "dctc",
		"body": [
			"using Unity.Entities;",
			"",
			"namespace ${1}",
			"{",
			"\tpublic struct ${2:$TM_FILENAME_BASE} : IComponentData { }",
			"}"
		],
		"description": "Create a Unity DOTS tag component"
	},
	"Dots Create Job": {
		"prefix": "dcj",
		"body": [
			"public partial struct ${2:Calculation}Job : IJobEntity",
			"{",
			"\tvoid Execute(ref ${3:Component} ${4:component})",
			"\t{",
			"\t\t${0}",
			"\t}",
			"}"
		],
		"description": "Create a Unity DOTS Job"
	},
	"Dots Create Baker": {
		"prefix": "dcb",
		"body": [
			"using UnityEngine;",
			"using Unity.Entities;",
			"",
			"namespace ${1}",
			"{",
			"\tpublic class ${2:$TM_FILENAME_BASE} : MonoBehaviour",
			"\t{",
			"\t\tpublic ${3:float} ${4:variable};${0}",
			"\t}",
			"",
			"\tpublic class ${5:Component}Baker : Baker<${2:$TM_FILENAME_BASE}>",
			"\t{",
			"\t\tpublic override void Bake(${2:$TM_FILENAME_BASE} authoring)",
			"\t\t{",
			"\t\t\tvar entity = GetEntity(TransformUsageFlags.Dynamic);",
			"\t\t\tAddComponent(entity, new ${5:Component}",
			"\t\t\t{",
			"\t\t\t\t${6:ComponentVariable} = authoring.${4:variable}",
			"\t\t\t});",
			"\t\t}",
			"\t}",
			"}"
		],
		"description": "Create a Unity DOTS component baker & its authoring monobehavior class"
	},
	"Dots Create Baker w/ Dependency": {
		"prefix": "dcbd",
		"body": [
			"using UnityEngine;",
			"using Unity.Entities;",
			"",
			"namespace ${1}",
			"{",
			"\tpublic class ${2:$TM_FILENAME_BASE} : MonoBehaviour",
			"\t{",
			"\t\tpublic ${3:GameObject} ${4:dataSource};",
			"\t}",
			"",
			"\tpublic class ${5:Component}Baker : Baker<${2:$TM_FILENAME_BASE}>",
			"\t{",
			"\t\tpublic override void Bake(${2:$TM_FILENAME_BASE} authoring)",
			"\t\t{",
			"\t\t\tDependsOn(authoring.${4:dataSource});",
			"\t\t\t",
			"\t\t\tif (authoring.${4:dataSource} == null) return;",
			"\t\t\t",
			"\t\t\tvar entity = GetEntity(TransformUsageFlags.Dynamic);",
			"\t\t\tAddComponent(entity, new ${5:Component}",
			"\t\t\t{",
			"\t\t\t\t${6:ComponentVariable} = authoring.${4:dataSource}.${0}",
			"\t\t\t});",
			"\t\t}",
			"\t}",
			"}"
		],
		"description": "Create a Unity DOTS component baker referencing another data source (i.e. mesh, gameObject, scriptable obj...)"
	},
	"Dots Create Aspect": {
		"prefix": "dca",
		"body": [
			"using Unity.Entities;",
			"",
			"namespace ${1}",
			"{",
			"\treadonly partial struct ${2:$TM_FILENAME_BASE} : IAspect",
			"\t{",
			"\t\treadonly ${3|RefRW,RefRO|}<${4:Component}> ${4:ComponentName};${0}",
			"\t}",
			"}"
		],
		"description": "Create a Unity DOTS aspect (used to group related components)"
	},
	"Dots Create Raycast": {
		"prefix": "dcrc",
		"body": [
			"var collisionWorld = SystemAPI.GetSingleton<PhysicsWorldSingleton>().CollisionWorld;",
			"",
			"RaycastInput input = new RaycastInput()",
			"{",
			"\tStart = ${1},",
			"\tEnd = ${2},",
			"\tFilter = new CollisionFilter()",
			"\t{",
			"\t\tBelongsTo = ${3:~0u},",
			"\t\tCollidesWith = ${4:~0u}, //preset is collides w/ everything",
			"\t\tGroupIndex = ${5:0}",
			"\t}",
			"};",
			"",
			"RaycastHit hit = new RaycastHit();",
			"bool didHit = collisionWorld.CastRay(input, out hit);",
			"",
			"if (didHit)",
			"{",
			"\t${0}",
			"}"
		],
		"description": "Create a Unity Physics (the DOTS package) raycast. NOTE: requires Unity Physics package to be installed and a using directive - using Unity.Physics;"
	}
}